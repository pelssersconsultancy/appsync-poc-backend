service: appsync-poc-backend
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

configValidationMode: error

plugins:
  - serverless-appsync-plugin
  - serverless-plugin-typescript

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-west-1
  stage: dev
  environment:
    STAGE: ${self:custom.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

package:
  patterns:
    - "!package-lock.json"
    - "!package.json"

custom:
  stage: ${opt:stage, self:provider.stage}

appSync: ${file(serverless.appsync-api.yml)}

functions:
  confirmUserSignup:
    handler: functions/confirm-user-signup.handler
    environment:
      USERS_TABLE: !Ref UsersTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt UsersTable.Arn

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: users-table

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireUppercase: false
            RequireSymbols: false
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: name
            Required: false
            Mutable: true
        # LambdaConfig:
        #   PostConfirmation: !GetAtt ConfirmUserSignupLambdaFunction.Arn

    # UserPoolInvokeConfirmUserSignupLambdaPermission:
    #   Type: AWS::Lambda::Permission
    #   Properties:
    #     Action: lambda:invokeFunction
    #     FunctionName: !Ref ConfirmUserSignupLambdaFunction
    #     Principal: cognito-idp.amazonaws.com
    #     SourceArn: !GetAtt CognitoUserPool.Arn

    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: web
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

    # AssetsBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     AccelerateConfiguration:
    #       AccelerationStatus: Enabled
    #     CorsConfiguration:
    #       CorsRules:
    #         - AllowedMethods:
    #             - GET
    #             - PUT
    #           # in production you want ony to allow the domain from your app
    #           AllowedOrigins:
    #             - "*"
    #           AllowedHeaders:
    #             - "*"

  Outputs:
    # AwsRegion:
    #   Value: ${self:custom.region}
    CognitoUserPoolId:
      Value: !Ref CognitoUserPool
    # WebCognitoUserPoolClientId:
    #   Value: !Ref WebUserPoolClient
